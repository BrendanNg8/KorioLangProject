{
  "scopeName": "source.klang",
  "name": "Klang",
  "patterns": [
    {
      "name": "comment.line.double-slash.klang",
      "match": "//.*$"
    },
    {
      "name": "string.quoted.double.klang",
      "begin": "\"",
      "end": "\"",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.string.begin.klang" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.definition.string.end.klang" }
      },
      "patterns": [
        {
          "name": "constant.character.escape.klang",
          "match": "\\\\."
        }
      ]
    },
    {
      "name": "constant.numeric.klang",
      "match": "\\b\\d+(?:\\.\\d+)?\\b"
    },
    {
      "name": "keyword.control.klang",
      "match": "\\b(?:let|final|def|if|else|while|for|in|return|Forge)\\b"
    },
    {
      "name": "constant.language.boolean.klang",
      "match": "\\b(?:true|false|null)\\b"
    },
    {
      "name": "storage.type.klang",
      "match": "\\b(?:int|float|string|bool|boolean|list|map)\\b"
    },
    {
      "name": "support.function.builtin.klang",
      "match": "\\b(?:print|range|filter|map|sum|len|get|set|keys|values|entries)\\b"
    },
    {
      "name": "keyword.operator.klang",
      "match": "==|!=|<=|>=|&&|\\|\\||[+\\-*/%<>!=]"
    },
    {
      "name": "punctuation.separator.klang",
      "match": "[{}()\\[\\],;:]"
    },
    {
      "name": "variable.other.klang",
      "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
    }
  ]
}
